def _get_value(wildcards, input):
    # csv_input = os.path.join(wildcards.results, "downsampling_" + wildcards.trim_method,
    #                          "downsampling_values.csv")
    # This is neccessary, because in a dry-run, snakemake will evaluate the 'params' 
    # directive in the (potentiall non-existing) input files. 
    # From https://stackoverflow.com/questions/46636844/is-snakemake-params-function-evaluated-before-input-file-existence
    if not Path(input.downsample_vals).exists():
        return -1
    csv_input = input.downsample_vals
    csv_file = pd.read_csv(csv_input).set_index("sample", drop = False)
    downsample_val = csv_file.loc[wildcards.sample, "relative.size"]
    if downsample_val != 1.0:
        downsample_val += 1 # This just makes the seed 1
        return("-h -b -s " + str(downsample_val) + " ")
    else:
        return("-h -b ")



rule find_downsample_val:
    input:
        expand(
            "{{results}}/atac_qc_{{trim_method}}_trim/{sample}/lib_complexity.rds",
            sample = SAMPLES
            )
    output:
        "{results}/downsampling_{trim_method}/downsampling_values.csv"
    params:
        samples  = SAMPLES
    singularity:
        R_CONTAINER
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/downsample_val/downsample_val_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/downsample_val/downsample_val_{wildcards.trim_method}_trim.err"
        )
    shell:
        """
        Rscript --vanilla src/scripts/find_downsample_val.R {output} {input}
        """

rule downsample_bams:
    input:
        downsample_vals = "{results}/downsampling_{trim_method}/downsampling_values.csv",
        mito_input =  "{results}/bowtie2_{trim_method}_trim/{sample}_remove_mt.txt"
    output:
        bam = "{results}/downsampling_{trim_method}/{sample}_downsampled.bam",
        bai = "{results}/downsampling_{trim_method}/{sample}_downsampled.bam.bai"
    params:
        downsample_command = _get_value,
        input_bam = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_remove_mt.bam")
    singularity:
        GENERAL_CONTAINER
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/downsample/downsample_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/downsample/downsample_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    shell:
        """
        samtools view {params.input_bam} \
            {params.downsample_command} \
            -o {output.bam}

        samtools index {output.bam}
        """