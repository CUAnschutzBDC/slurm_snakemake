""" Snake pipeline for running cellranger with CITE-seq data """

# This has been borrowed and modified from pipelines written by Ryan Sheridan

# Configure shell for all rules 
shell.executable("/bin/bash")
shell.prefix("set -o nounset -o pipefail -o errexit -x; ")
import subprocess
import glob
import os 
import re
from collections import defaultdict
import pandas as pd
import sys
from typing import Tuple, Optional

# Parameters from config.yaml
SCRATCH_DIR    = config["SCRATCH_DIR"]
BASE_PATH      = config["BASE_PATH"]
RAW_DATA       = config["RAW_DATA"]
SAMPLES        = config["SAMPLES"]
RNA_SAMPLES    = config["RNA_SAMPLES"]
ADT_SAMPLES    = config["ADT_SAMPLES"]
VDJ_T_SAMPLES  = config["VDJ_T_SAMPLES"]
VDJ_B_SAMPLES  = config["VDJ_B_SAMPLES"]
RESULTS        = config["RESULTS"]
GENOME         = config["GENOME"]
ADT_REF        = config["ADT_REF"]
VDJ_REF        = config["VDJ_REF"]
MAX_JOBS       = config["MAX_JOBS"]
AGGR_GROUP     = config["AGGR_SAMPLES"]
CHEMISTRY      = config["CHEMISTRY"]
VELOCYTO_GROUP = config["VELOCYTO_GROUP"]
SCRIPT_PATH     = config["SCRIPT_PATH"]
SCRIPTS_RUN     = config["SCRIPTS_RUN"]
SAMPLE_SCRIPTS  = config["SAMPLE_SCRIPTS"]
MERGE_SCRIPTS   = config["MERGE_SCRIPTS"]
SAMPLE_INFO    = config["SAMPLE_INFO"]
CLUSTER_TEMPLATE = config["CLUSTER_TEMPLATE"]
SUBSET_SCRIPTS  = config["SUBSET_SCRIPTS"]

CELLRANGER_PATH = config["CELLRANGER_PATH"]

# Set apptainer bindings NOT A PERMANENT SOLUTION
# Note we need to bind our alpine bin to the "server_bin" directory in the singularity environment.
# This has already been created and added to the path.
os.environ["APPTAINER_BIND"] = f"/scratch/alpine:/scratch/alpine," \
                               f"/pl/active/Anschutz_BDC:/pl/active/Anschutz_BDC," \
                               f"/tmp:/tmp," \
                               f"/usr/bin:/opt/server_bin"

# Function to check paths for input files/directories
def _check_path(path: str) -> str:
    if os.path.exists(path):
        return os.path.abspath(path)
    else:
        sys.exit(f"ERROR: {path} does not exist.")

def setup_scratch(base_path: str, scratch_dir: str, results_dir: str) -> str:
    """
    Makes a path in the scratch space identical to the path in the current direcotry.
    Returns the variable with this new path
    """
    current_dir = os.getcwd()
    if (scratch_dir == ""):
        results2 = results
    else:
        rel_path_to_home = os.path.relpath(current_dir, start=base_path)
        results2 = os.path.join(scratch_dir, rel_path_to_home, results_dir)
        os.makedirs(results2, exist_ok = True)

    return results2


def make_sample_dicts(
    samples: list,
    type_samples: list,
    reference: Optional[str] = None
) -> Tuple[list, dict, Optional[str]]:
    """
    Makes the sample dictionaries for all assay types.

    Args:
        samples (list): List of sample names.
        type_samples (list): List of type-specific samples.
        reference (str, optional): Path to reference file.

    Returns:
        tuple: (type_samples, sample_dict, reference)
    """
    if type_samples:
        # Removes the newlines at the end of each sample
        type_samples = [sample.strip() for sample in type_samples]
        # Make a dictionary mapping the sample name to the fastq prefix
        sample_dict = dict(zip(samples, type_samples))
        if reference is not None:
            reference = _check_path(reference)
    else:
        sample_dict = {sample: "" for sample in samples}

    return type_samples, sample_dict, reference

def make_chemsitry_dict(samples: list, chemistry: Optional[dict] = None) -> dict:
    """
    Makes the chemistry dictionary. If any chemistries aren't provided for a sample,
    the chemistry is set to auto

    Args:
        samples (list): List of sample names.
        chemistry (dict, optional): Existing chemistry dictionary.

    Returns:
        chemistry dictionary
    """
    if chemistry is None:
        chemistry = {}

    return {sample: chemistry.get(sample, "auto") for sample in samples}

def create_raw_data_dict(samples: list, raw_data: list) -> dict:
    """
    Create the raw data dictionary

    Args:
        samples (list): list of sample names
        raw_data (list): list of raw_data directory paths
    
    Returns:
        A new dictionary of the raw data directories mapped to samples
    """
    if len(raw_data) == len(samples):
        return {sample: data for sample, data in zip(samples, raw_data)}
    elif len(raw_data) == 1:
        return {sample: raw_data[0] for sample in samples}
    else:
        raise ValueError("RAW_DATA must either be the same length of samples or length 1")

def ensure_directory_exists(path: str) -> str:
    """
    Make sure paths exist and create them if not

    Args:
        path (str): The path to check
    
    Returns:
        path (str): The full path that has been created if it doesn't already exist
    """
    if not os.path.exists(path):
        os.makedirs(path)
    return _check_path(path)

def build_general_scripts(scripts_run: dict) -> Tuple[dict, dict]:
    """
    Creates a dictionary containing a list of all scripts to run. Note, each of these
    will only be run once and are not dependent on sample.

    Args:
        scripts_run - The scripts_run input from the config file
    
    Returns:
        script_dict - A nested dictionary. The first layer, the key is a sample name and the value is 
        an ordered dictionary containing all scripts to run for that sample (in the order required) tied to 
        the sample as the unique key (which will be used for all output and log files) and the full path
        to the script as the value. This dictionary is used to pull out what scripts need to be run before
        a sspecific script can be run in addition to the path of each script.
        script_name_dict - A dictionary mapping the unique key from the script_dict (which consists of the
        sample and the script name that is used for log and output files) mapped to the sample. This way
        it is easy to tie the sample to the specific script. This is helpful for cases when extra pieces
        are added to the unique key of the script_dict
    """

    if scripts_run:
        # Get R script info
        # All script names is the keys of scripts run
        script_name_dict = {script:"all_scripts" for script in scripts_run.keys()}
        # Create script dict where all scripts is all the scripts_run scripts
        script_dict = {"all_scripts": scripts_run}

        return script_dict, script_name_dict
    else:
        return {}, {}

def build_sample_scripts(
    sample_scripts: dict, 
    samples: list, 
    script_dict: dict, 
    script_name_dict: dict
) -> Tuple[dict, dict]:
    """
    For each sample, adds all of the sample specific scripts to a dictionary. This is done so that
    the same scripts can be run for different samples in parallel, but scripts for one sample (that
    are often dependent on each other) are run in order.

    Args:
        sample_scripts - The dictionary from the config file 
        samples - A list of all samples from the experiment
        script_dict - The nested dictionary made by build_general_scripts and described in depth below
        script_name_dict - The dictionary made by build_general_scripts and described in depth below.
    
    Returns:
        script_dict - A nested dictionary. The first layer, the key is a sample name and the value is 
        an ordered dictionary containing all scripts to run for that sample (in the order required) tied to 
        the sample as the unique key (which will be used for all output and log files) and the full path
        to the script as the value. This dictionary is used to pull out what scripts need to be run before
        a sspecific script can be run in addition to the path of each script.
        script_name_dict - A dictionary mapping the unique key from the script_dict (which consists of the
        sample and the script name that is used for log and output files) mapped to the sample. This way
        it is easy to tie the sample to the specific script. This is helpful for cases when extra pieces
        are added to the unique key of the script_dict
    """
    # First check if there are any sample scripts to run, if not, return the dictionaries unchanged.
    if not sample_scripts:
        return script_dict, script_name_dict

    # Decide what samples to run scripts for, if all, run all samples
    if sample_scripts["samples"] == "all" or sample_scripts["samples"] == ["all"]:
        sample_scripts["samples"] = samples
    
    # Build the dictionary for each sample
    for sample_name in sample_scripts["samples"]:
        individual_dict = OrderedDict()

        # Each sample is an ordered dictionary of all scripts in order
        for script in sample_scripts["scripts_run"]:

            # This key will be the unique name used for log and output files
            dict_key = f"{sample_name}__{script.replace('.R', '')}"
            dict_value = os.path.join("individual_analysis", script)
            individual_dict[dict_key] = dict_value
            script_name_dict[dict_key] = sample_name
        # Add the new dictionary to the existing script_dict dictionary
        script_dict[sample_name] = individual_dict
    
    return script_dict, script_name_dict

def build_merge_scripts(
    new_script_dict: dict,
    script_dict: dict,
    script_name_dict: dict,
    type: str
) -> Tuple[dict, dict]:
    """
    For each sample, adds all of the merged scripts (both before and after subsetting) to a dictionary. This is done so that
    the same scripts can be run for different samples in parallel, but scripts for one sample (that
    are often dependent on each other) are run in order.

    Args:
        new_script_dict - The dictionary from the config file 
        script_dict - The nested dictionary made by build_general_scripts and described in depth below
        script_name_dict - The dictionary made by build_general_scripts and described in depth below.
        type - If it is merged or subsetted
    
    Returns:
        script_dict - A nested dictionary. The first layer, the key is a sample name and the value is 
        an ordered dictionary containing all scripts to run for that sample (in the order required) tied to 
        the sample as the unique key (which will be used for all output and log files) and the full path
        to the script as the value. This dictionary is used to pull out what scripts need to be run before
        a sspecific script can be run in addition to the path of each script.
        script_name_dict - A dictionary mapping the unique key from the script_dict (which consists of the
        sample and the script name that is used for log and output files) mapped to the sample. This way
        it is easy to tie the sample to the specific script. This is helpful for cases when extra pieces
        are added to the unique key of the script_dict
    """
    # First check if there are scripts to merge, if not, return the dictionaries unchanged.
    if not new_script_dict:
        return script_dict, script_name_dict
    
    # Build dictionaries for each "sample" or merge group, each will be an ordered dictionary of scripts to run in 
    # the order they should be run
    for sample in new_script_dict["samples"]:
        new_dict = OrderedDict()
        dict_name = f"{type}_{sample}"
        for script in new_script_dict["scripts_run"]:
            dict_key = f"{sample}__{script.replace('.R', '')}"
            dict_value = os.path.join("integrated_analysis", script)
            new_dict[dict_key] = dict_value
            script_name_dict[dict_key] = dict_name
        script_dict[dict_name] = new_dict
    
    return script_dict, script_name_dict

def build_script_dicts(
    scripts_run: dict, 
    sample_scripts: dict,
    merge_scripts: dict,
    subset_scripts: dict,
    samples: list
) -> Tuple[dict, dict]:
    """
    Takes dictionaries from the config file and builds new dictionaries that are used to determine the order
    scripts will be run in and what scripts can't be run in parallel

    Args:
        scripts_run - Standalone scripts from the config file
        sample_scripts - scripts run in order for each sample from the config file
        merge_scripts - scripts run in order based on merging of samples
        subset_scripts - scripts run in order after subsetting the merged data
        samples - the full list of samples

    Returns:
        script_dict - A nested dictionary. The first layer, the key is a sample name and the value is 
        an ordered dictionary containing all scripts to run for that sample (in the order required) tied to 
        the sample as the unique key (which will be used for all output and log files) and the full path
        to the script as the value. This dictionary is used to pull out what scripts need to be run before
        a sspecific script can be run in addition to the path of each script.
        script_name_dict - A dictionary mapping the unique key from the script_dict (which consists of the
        sample and the script name that is used for log and output files) mapped to the sample. This way
        it is easy to tie the sample to the specific script. This is helpful for cases when extra pieces
        are added to the unique key of the script_dict
    """
    script_dict, script_name_dict = build_general_scripts(scripts_run)
    script_dict, script_name_dict = build_sample_scripts(sample_scripts, samples, script_dict, script_name_dict)
    script_dict, script_name_dict = build_merge_scripts(merge_scripts, script_dict, script_name_dict, type = "merged")
    script_dict, script_name_dict = build_merge_scripts(subset_scripts, script_dict, script_name_dict, type = "subset")
    
    return script_dict, script_name_dict

# Make the desired path in scratch
RESULTS2 = setup_scratch(base_path = BASE_PATH, scratch_dir = SCRATCH_DIR, results_dir = RESULTS)

# Fastq paths
FASTQ_INFO      = r"_S[0-9]+_L[0-9]+_R[12]_[0-9]+\.fastq\.gz"
#FASTQ_INFO     = r"_S[0-9]+_R[12]_[0-9]+\.fastq\.gz"

# Set up sample dictionaries
RNA_SAMPLES, SAMPLE_DICT_RNA, RNA_REF = make_sample_dicts(SAMPLES, RNA_SAMPLES, 
                                                          reference = None)

ADT_SAMPLES, SAMPLE_DICT_ADT, ADT_REF = make_sample_dicts(SAMPLES, ADT_SAMPLES, 
                                                          reference = ADT_REF)

VDJ_T_SAMPLES, SAMPLE_DICT_VDJ_T, VDJ_REF = make_sample_dicts(SAMPLES, VDJ_T_SAMPLES, 
                                                          reference = VDJ_REF)

VDJ_B_SAMPLES, SAMPLE_DICT_VDJ_B, VDJ_REF = make_sample_dicts(SAMPLES, VDJ_B_SAMPLES, 
                                                          reference = VDJ_REF)

# Make a chemsitry dictionary in case any chemisries were provided
CHEMISTRY = make_chemsitry_dict(SAMPLES, CHEMISTRY)


# Create and check directories
RAW_DATA_DICT = create_raw_data_dict(SAMPLES, RAW_DATA)
RESULTS = ensure_directory_exists(RESULTS)
FASTQ_DIR = ensure_directory_exists(os.path.join(RESULTS2, "fastqs"))
if CLUSTER_TEMPLATE:
   CLUSTER_TEMPLATE = _check_path(CLUSTER_TEMPLATE)
else:
   CLUSTER_TEMPLATE = "local"

AGGR_GROUP = AGGR_GROUP or "none"
VELOCYTO_GROUP = VELOCYTO_GROUP or "none"

# Build script dicts
script_dict, script_name_dict = build_script_dicts(SCRIPTS_RUN, SAMPLE_SCRIPTS, MERGE_SCRIPTS, SUBSET_SCRIPTS, SAMPLES)

print(script_dict)

# Final output files
rule all:
    input:
        expand(
            "{results}/snake_outs/{sample}_csv_done.txt",
            results = RESULTS, sample = SAMPLES
        ),
        expand(
            "{results}/snake_outs/{sample}_count_done.txt",
            results = RESULTS, sample = SAMPLES
        ),
        # Copy important output from scratch
        expand(
            "{results}/snake_outs/{sample}_moved_files.txt",
            results = RESULTS, sample = SAMPLES
        ),
        # expand(
        #     "{results}/snake_outs/{group}_csv_aggr_done.txt",
        #     results = RESULTS, group = AGGR_GROUP
        #     ),
        # expand(
        #     "{results}/snake_outs/{group}_cellranger_aggr_done.txt",
        #     results = RESULTS, group = AGGR_GROUP
        #     ),
        expand(
            "{results}/run_scripts/{sample}_run.txt",
            sample = script_name_dict.keys(), results = RESULTS
            ),
#         # expand(
#         #     "{results}/logs/{sample}_velocyto_done.out",
#         #     results = RESULTS, sample = SAMPLES
#         # ),
#         # expand(
#         #     "{results}/logs/{group}_velocyto_combined.out",
#         #     results = RESULTS, group = VELOCYTO_GROUP
#         #     )

include: "src/rules/cellranger_multi.snake"
include: "src/rules/run_rscripts.snake"
# include: "src/rules/velocyto.snake"
