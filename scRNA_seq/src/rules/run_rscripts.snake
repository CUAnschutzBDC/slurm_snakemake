def build_merge_input(key_value, samples, sample_info, script_type, results, return_list):
    # If merged, first add all scripts associated with the samples being merged

    # Some housekeeping to select the correct column of the sample table
    if script_type == "merged":
        colname = "merge_samples"
    elif script_type == "subset":
        colname = "subset_from"
    else:
        sys.exit(f"Unknown script_type, {script_type}!")

    # Set combine samples to an empty string to check for incorrectly formatted 
    # sample tables
    combine_samples = ""

    # If "_all" just add all samples
    if key_value == f"{script_type}_all":
        combine_samples = samples
    else: 
        merge_sample = re.sub(f"{script_type}_", "", key_value)
        with open(sample_info, "r") as all_samples:
            header = next(all_samples).strip().split("\t")
            for line in all_samples:
                line = line.strip().split("\t")
                line_dict = dict(zip(header, line))
                if line_dict["sample"] == merge_sample:
                    combine_samples = line_dict[colname].split(",")
        if combine_samples == "":
            sys.exit(f"No samples found for {merge_sample}! Check the {colname} column in the sample info file")
    if script_type == "subset":
        combine_samples = [f"merged_{sample}" for sample in combine_samples]
    for sample_name in combine_samples:
        sample_scripts = script_dict[sample_name].keys()
        for i in sample_scripts:
            input_file = os.path.join(results, "run_scripts", f"{i}_run.txt")
            return_list.append(input_file)
    
    return return_list

def build_all_input(script_names, sample, results, return_list):
    # Add scripts in order for the given sample, return once you hit the script you
    # are currently on.
    for i in script_names:
        if i == sample:
            # return_short = [os.path.basename(i) for i in return_list]
            # print(return_short)
            return return_list
        else:
            input_file = os.path.join(results, "run_scripts", f"{i}_run.txt")
            return_list.append(input_file) 

def _get_input(wildcards):
    return_list = []

    # Cellranger output
    sample_name = wildcards.sample
    sample_name = re.sub("__.*", "", wildcards.sample)
    if sample_name != "merged":
        return_list.append(os.path.join(wildcards.results, "snake_outs", f"{sample_name}_moved_files.txt"))

    # First figure out where in the dict it should be
    key_value = script_name_dict[wildcards.sample]
    script_names = script_dict[key_value].keys()

    # Add all of the scripts necessary before the merged script can be run
    if re.search("merged", key_value):
        return_list = build_merge_input(key_value = key_value, samples = SAMPLES, 
                                       sample_info = SAMPLE_INFO, script_type = "merged",
                                       results = wildcards.results, return_list = return_list)

    elif re.search("subset", key_value):
        return_list = build_merge_input(key_value = key_value, samples = SAMPLES, 
                                       sample_info = SAMPLE_INFO, script_type = "subset",
                                       results = wildcards.results, return_list = return_list)


    # Build the per sample input -- This goes through each script in order and adds it to the return list until it hits
    # the current script
    return build_all_input(script_names = script_names, sample = wildcards.sample, 
                           results = wildcards.results, return_list = return_list)

def _get_dropkick_input(wildcards):
    sample_name = wildcards.sample
    sample_name = re.sub("__.*", "", wildcards.sample)
    if sample_name != "merged":
        return(os.path.join(wildcards.results, "R_analysis", sample_name, "files/dropkick_cells.csv"))
    else:
        return([])

def _get_scripts(wildcards):
    key_value = script_name_dict[wildcards.sample]
    script_name = script_dict[key_value][wildcards.sample]

    full_script_path=os.path.join(SCRIPT_PATH, script_name)
    _check_path(full_script_path)
    return(full_script_path)

# Add in one rule that makes sure all cellranger is done. That output goes
# into the return list.

rule run_rscript:
    input:
        #_get_dropkick_input,
        _get_input
    output:
        "{results}/run_scripts/{sample}_run.txt"
    params:
        scripts         = _get_scripts,
        sample_info     = SAMPLE_INFO
    singularity:
        config["RSCRIPT_CONTAINER"]
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/rscript/{wildcards.sample}.out "
            f"--error={wildcards.results}/logs/rscript/{wildcards.sample}.err"
        )
    threads:
        1   
    shell:
        """
        Rscript --vanilla {params.scripts} \
            {wildcards.sample} \
            {wildcards.results} \
            {params.sample_info}
            
        echo "Finished rscript" > {output}
        """

rule run_dropkick:
    input:
        "{results}/snake_outs/{sample}_count_done.txt"
    output:
        "{results}/R_analysis/{sample}/images/dropkick/coef_plot.pdf",
        "{results}/R_analysis/{sample}/files/dropkick_cells.csv"
    singularity:
        config["DROPKICK_CONTAINER"]
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/dropkick/{wildcards.sample}_dropkick.out "
            f"--error={wildcards.results}/logs/dropkick/{wildcards.sample}_dropkick.err"
        )
    threads:
        1  
    shell:
        """
        python src/scripts/indiviual_analysis/01_dropkick.py -d {wildcards.results} -s {wildcards.sample}
        """



# rule run_scar:
# 	input:
# 		"{results}/logs/{sample}_count_done.txt"
# 	output:
# 		"{results}/R_analysis/{sample}/files/scar_denoised.csv"
# 	params:
# 		job_name  = "{sample}_run_scar",
# 		memory    = "select[mem>100] rusage[mem=100]"
# 	singularity:
# 		config["SCAR_CONTAINER"]
# 	log:
# 		"{results}/logs/scar/scar_{sample}"
# 	threads:
# 		10
# 	shell:
# 		"""
# 		python src/scripts/indiviual_analysis/01b_run_scar.py \
# 			-d {wildcards.results} \
# 			-s {wildcards.sample}
# 		"""
