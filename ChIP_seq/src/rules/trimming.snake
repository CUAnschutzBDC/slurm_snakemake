# Run bbduk to remove adaptors
# Find an example of running bbduk here:
    # https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
# There is an adapter trimming usage example

# Function to return paths of input files
def _get_input(wildcards):
    # Grab path of the fastq file
    fastq1 = SAMPLE_LIST.loc[wildcards.sample, "fastq1"]
    data_dir = SAMPLE_LIST.loc[wildcards.sample, "data_dir"]
    fastq1 = os.path.join(data_dir, fastq1)
    # Make sure file exists
    fastq1  = _check_path(fastq1)
    if IS_PAIRED:
        # Grab path of second read
        fastq2 = SAMPLE_LIST.loc[wildcards.sample, "fastq2"]

        fastq2 = os.path.join(data_dir, fastq2)
        # Make sure file exists
        fastq2 = _check_path(fastq2)
        return(fastq1, fastq2)
    else:
        return(fastq1)



rule bbduk:
    input:
        input_list   = _get_input,
        fastqc_output = "{results}/fastqc_pre_trim/fastqc_{sample}_summary_untrimmed.txt"
    output:
        "{results}/bbduk_trim/{sample}.txt"
    params:
        ref       = ADAPTORS,
        opts      = CMD_PARAMS["bbduk"],
        fastq1    = os.path.join(RESULTS2, "bbduk_trim/{sample}_R1_trimmed.fastq.gz"),
        fastq2    = os.path.join(RESULTS2, "bbduk_trim/{sample}_R2_trimmed.fastq.gz"),
        out_dir   = os.path.join(RESULTS2, "bbduk_trim"),
        paired    = IS_PAIRED
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/bbduk/bbduk_{wildcards.sample}.out "
            f"--error={wildcards.results}/logs/bbduk/bbduk_{wildcards.sample}.err"
        )
    singularity:
       GENERAL_CONTAINER
    shell:
        """
        mkdir -p {params.out_dir}
        if [ {params.paired} ]
        then
            bbduk.sh \
                in1   = {input.input_list[0]} \
                in2   = {input.input_list[1]} \
                out1  = {params.fastq1} \
                out2  = {params.fastq2} \
                ref   = {params.ref} \
                {params.opts}

        else
            bbduk.sh \
                in1   = {input.input_list} \
                out1  = {params.fastq1} \
                ref   = {params.ref} \
                {params.opts}
        fi
        echo "done with bbduk trimming" > {output}
        """

""" Rules for trimming reads with cutadapt """
# Run cutadapt for single-end reads
rule cutadapt:
    input:
        input_list   = _get_input,
        fastqc_output = "{results}/fastqc_pre_trim/fastqc_{sample}_summary_untrimmed.txt"
    output:
        "{results}/cutadapt_trim/{sample}.txt"
    params:
        settings  = CMD_PARAMS["cutadapt"],
        fastq1    = os.path.join(RESULTS2, "cutadapt_trim/{sample}_R1_trimmed.fastq.gz"),
        fastq2    = os.path.join(RESULTS2, "cutadapt_trim/{sample}_R2_trimmed.fastq.gz"),
        out_dir   = os.path.join(RESULTS2, "cutadapt_trim"),
        paired    = IS_PAIRED
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/cutadapt/cutadapt_{wildcards.sample}.out "
            f"--error={wildcards.results}/logs/cutadapt/cutadapt_{wildcards.sample}.err"
        )
    singularity:
       GENERAL_CONTAINER
    message:
        "Trimming illumina adapters for {wildcards.sample}" 
    threads:
        1
    shell:
        """
        mkdir -p {params.out_dir}
        if [ {params.paired} ]
        then
            cutadapt \
                {params.settings} \
                -o {params.fastq1} \
                -p {params.fastq2} \
                {input.input_list[0]}  \
                {input.input_list[1]}
        else
            cutadapt \
                {params.settings} \
                -o {params.fastq1} \
                {input.input_list}
        fi
        echo "done with cutadapt trimming" > {output}
        """


rule no_trim:
    input:
        input_list = _get_input,
        fastqc_output = "{results}/fastqc_pre_trim/fastqc_{sample}_summary_untrimmed.txt"
    output:
        "{results}/no_trim/{sample}.txt"
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/no_trim/no_trim_{wildcards.sample}.out "
            f"--error={wildcards.results}/logs/no_trim/no_trim_{wildcards.sample}.err"
        )
    run:
        with open(output[0], "w") as out:
            out.write("No trimming done on these samples\n")