# This runs bowtie on the files from the samples document can be single or paired end
# It also removes duplicate reads, keeps only properly paired reads that are the primary 
# aligment, and removes multimappers (XS flag in bowtie2)

# Function to return paths of input files
def _get_input(wildcards):
    if wildcards.trim_method == "no":
        if merge_fastq:
            # Make a list of the merged fastqs
            fastq1 = os.path.join(RESULTS2, "merged_fastqs", wildcards.sample + "_R1.fastq.gz")
            if IS_PAIRED:
                fastq2 = os.path.join(RESULTS2, "merged_fastqs", wildcards.sample + "_R2.fastq.gz")
                return(fastq1, fastq2)
            else:
                return(fastq1)
        else:
            # Grab path of the fastq file
            fastq1 = SAMPLE_LIST.loc[wildcards.sample, "fastq1"]
            data_dir = SAMPLE_LIST.loc[wildcards.sample, "data_dir"]
            fastq1 = os.path.join(data_dir, fastq1)
            # Make sure file exists
            fastq1  = _check_path(fastq1)
            if IS_PAIRED:
                # Grab path of second read
                fastq2 = SAMPLE_LIST.loc[wildcards.sample, "fastq2"]
                fastq2 = os.path.join(data_dir, fastq2)
                # Make sure file exists
                fastq2 = _check_path(fastq2)
                return(fastq1, fastq2)
            else:
                return(fastq1)
    else:
        fastq1 = os.path.join(RESULTS2, wildcards.trim_method + "_trim",
            wildcards.sample + "_R1_trimmed.fastq.gz")
        if IS_PAIRED:
            # Grab path of second read
            fastq2 = os.path.join(RESULTS2, wildcards.trim_method + "_trim",
                wildcards.sample + "_R2_trimmed.fastq.gz")
            return(fastq1, fastq2)
        else:
            return(fastq1)

rule align:
    input:
        "{results}/{trim_method}_trim/{sample}.txt"
    output:
        completed_file = "{results}/bowtie2_{trim_method}_trim/{sample}_done.txt",
        log_output     = "{results}/bowtie2_{trim_method}_trim/{sample}_metrics.out"
    params:
        genome     = GENOME,
        fastqs     = _get_input,
        paired     = IS_PAIRED,
        scratch    = RESULTS2,
        bam_output = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_Aligned.out.bam"),
        bai_file   = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_Aligned.out.bam.bai"),
        out_dir    = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim")
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/bowtie2/bowtie2_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/bowtie2/bowtie2_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    singularity:
       GENERAL_CONTAINER
    message:
        "Aligning reads for {wildcards.sample}"
    threads:
        6
    shell:
        """
        mkdir -p {params.out_dir}
        if [ {params.paired} ]
        then
            all_fastqs=({params.fastqs})
            bowtie2 \
                --very-sensitive \
                -k 10 \
                -x {params.genome} \
                --threads {threads} \
                --rg-id {wildcards.sample} \
                --rg 'SM:{wildcards.sample}' \
                --met-file {output.log_output} \
                -1 ${{all_fastqs[0]}} \
                -2 ${{all_fastqs[1]}} | \
                samtools view -b - | \
                samtools sort -o {params.bam_output} -

        else
            bowtie2 \
                --very-sensitive \
                -k 10 \
                -x {params.genome} \
                --threads {threads} \
                --rg-id {wildcards.sample} \
                --rg 'SM:{wildcards.sample}' \
                --met-file {output.log_output} \
                -U {params.fastqs} | \
                samtools view -b - | \
                samtools sort -o {params.bam_output} -


        fi

        samtools index {params.bam_output}
        touch {output.completed_file}
       """

# Get alignment stats
rule aligment_stats:
    input:
        expand(
            "{{results}}/bowtie2_{{trim_method}}_trim/{sample}_done.txt",
            sample = SAMPLES
            )
    output:
        "{results}/bowtie2_{trim_method}_trim/bowtie_stats_finished.txt"
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/bowtie2_stats/bowtie2_stats_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/bowtie2_stats/bowtie2_stats_{wildcards.trim_method}_trim.err"
        ) 
    params:
        out_dir  = "{results}/bowtie2_{trim_method}_trim",
        in_dir   = "{results}/logs/bowtie2"
    singularity:
       GENERAL_CONTAINER
    threads:
        1
    shell:
        """
        python src/scripts/get_bowtie_stats.py \
            -d {params.in_dir} \
            -o {params.out_dir} \
            -t {wildcards.trim_method}

        echo "finished" > {output}
        """

#-S means input is SAM, no longer needed
#-h means include header
#-f Only output alignments with bit set to int (2 means read mapped in proper pair)
#-F Don't output alignments with bits set in int (256 means not primary alignment)
rule remove_mito:
    input:
        finished = "{results}/bowtie2_{trim_method}_trim/{sample}_done.txt"
    output:
        completed_file = "{results}/bowtie2_{trim_method}_trim/{sample}_remove_mt.txt",
        mito_stats = "{results}/bowtie2_{trim_method}_trim/{sample}_mito_stats.txt"
    params:
        in_bam = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_Aligned.out.bam"),
        mt_bam = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_remove_mt.bam"),
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/remove_mito/remove_mito_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/remove_mito/remove_mito_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    singularity:
       GENERAL_CONTAINER
    shell:
        """
        # Remove mapping to mitochondria
        samtools idxstats {params.in_bam} \
            | cut -f 1 \
            | grep -v MT \
            | xargs samtools view \
            -b {params.in_bam} > {params.mt_bam}

        samtools index {params.mt_bam}

        # Write stats file

        # Calculate counts
        all_reads=$(samtools view -c {params.in_bam})
        mapped_reads=$(samtools view -c -f 3  -F 4  -F 8 -F 256 \
                            -F 2048 {params.in_bam})
        no_mito_reads=$(samtools view -c -f 3  -F 4  -F 8 -F 256 \
                            -F 2048 {params.mt_bam})

        # Write to output file
        echo "sample,all_reads,mapped_reads,no_mito_reads,final_reads" > {output.mito_stats}
        echo -n "{wildcards.sample},$all_reads,$mapped_reads,$no_mito_reads" >> {output.mito_stats}

        touch {output.completed_file}
        """


rule mark_duplicates:
    input:
        finished = "{results}/bowtie2_{trim_method}_trim/{sample}_remove_mt.txt"
    output:
        picard_metrics = "{results}/bowtie2_{trim_method}_trim/{sample}_picard_dupMark.txt",
        completed_file = "{results}/bowtie2_{trim_method}_trim/rm_dup_{sample}_finished.txt"
    params:
        mt_bam     = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_remove_mt.bam"),
        picard_jar = PICARD_JAR,
        temp_file  = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_dup_temp.bam"),
        temp_dir   = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim"),
        dup_bam    = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_mark_dup.bam")
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/mark_duplicates/mark_duplicates_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/mark_duplicates/mark_duplicates_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    singularity:
       PICARD_CONTAINER
    shell:
        """
        # Sort sam
        java -jar {params.picard_jar} SortSam \
            -I {params.mt_bam} -O {params.temp_file} \
            -SO coordinate \
            --TMP_DIR {params.temp_dir}

        # Mark duplicates
        java -jar {params.picard_jar} MarkDuplicates \
            -I {params.temp_file} -O {params.dup_bam} \
            --METRICS_FILE {output.picard_metrics}

        rm {params.temp_file}
        touch {output.completed_file}
        """

rule remove_duplicate_reads:
    input:
        completed_file = "{results}/bowtie2_{trim_method}_trim/rm_dup_{sample}_finished.txt",
        mito_stats = "{results}/bowtie2_{trim_method}_trim/{sample}_mito_stats.txt"
    output:
        bam = "{results}/bowtie2_{trim_method}_trim/{sample}_remove_dup.bam",
        bai = "{results}/bowtie2_{trim_method}_trim/{sample}_remove_dup.bam.bai"
    params:
        mapq_threshold = 20,
        dup_bam        = os.path.join(RESULTS2, "bowtie2_{trim_method}_trim/{sample}_mark_dup.bam")
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/remove_duplicate_reads/remove_duplicate_reads_{wildcards.sample}_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/remove_duplicate_reads/remove_duplicate_reads_{wildcards.sample}_{wildcards.trim_method}_trim.err"
        )
    singularity:
       GENERAL_CONTAINER
    shell:
        """
        samtools index {params.dup_bam}

        # From tutorial https://cambiotraining.github.io/chipseq/Practicals/ATACseq/ATACseq_tutorial.html
        # -f 3: only include alignments marked with the SAM flag 3, which means “properly paired and mapped”
        # -F 4: exclude aligned reads with flag 4: the read itself did not map
        # -F 8: exclude aligned reads with flag 8: their mates did not map
        # -F 256: exclude alignments with flag 256, which means that Bowtie mapped the read to multiple places in the reference genome, and this alignment is not the best
        # -F 1024: exclude alignments marked with SAM flag 1024, which indicates that the read is an optical or PCR duplicate (this flag would be set by Picard)
        # -F 2048: exclude alignments marked with SAM flag 2048, indicating chimeric alignments, where Bowtie decided that parts of the read mapped to different regions in the genome. These records are the individual aligned segments of the read. They usually indicate structural variation. We’re not going to base peak calls on them.
        # Finally, we use a basic quality filter, -q 15, to request high-quality alignments.
        samtools view \
            -b -h \
            -f 3 \
            -F 4 \
            -F 8 \
            -F 256 \
            -F 1024 \
            -F 2048 \
            -q params.mapq_threshold \
            -o {output.bam} \
            {params.dup_bam}

        all_reads=$(samtools view -c {output.bam})

        echo ",$all_reads" >> {input.mito_stats}

        samtools index {output.bam}
        """

# Note this gives a warning about escape characters
# Unsure how to fix because it is shell
# This mentions the same issue 
# https://stackoverflow.com/questions/77967238/syntax-warning-for-escaped-period-in-triple-quoted-shell-rule
rule dup_stats:
    input:
        expand(
            "{{results}}/bowtie2_{{trim_method}}_trim/{sample}_remove_dup.bam",
            sample = SAMPLES
        )
    output:
        "{results}/bowtie2_{trim_method}_trim/dup_stats.txt"
    params:
        directory = "{results}/bowtie2_{trim_method}_trim"
    resources:
        slurm_extra=lambda wildcards: (
            f"--output={wildcards.results}/logs/dup_stats/dup_stats_{wildcards.trim_method}_trim.out "
            f"--error={wildcards.results}/logs/dup_stats/dup_stats_{wildcards.trim_method}_trim.err"
        )
    singularity:
       GENERAL_CONTAINER
    shell:
        """
        first_file=true
        # Loop through files with the specified structure
        for file in {params.directory}/*picard_dupMark.txt; do
            sample_name=$(basename "$file" | sed 's/_picard_dupMark\.txt//')

            # If it's the first file, print the LIBRARY line
            if [ "$first_file" = true ]; then
                library_info=$(grep "LIBRARY" "$file" | awk 'NR==1{{print $0}}')
                echo "sample\t${{library_info}}"> {output}
                first_file=false
            fi
            # Extract information under the LIBRARY section
            library_info=$(grep -A 1 "LIBRARY" "$file" | awk 'NR==2{{print $0}}')
            
            # Print sample name and library info
            echo "${{sample_name}}\t${{library_info}}" >> {output}

        done
        """

